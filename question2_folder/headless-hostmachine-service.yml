# Headless service: It is a service with a service IP but instead of load-balancing it returns the IPs of our associated Pods. This allows for interacting directly with the Pods instead of a proxy.
apiVersion: v1
kind: Service
metadata:
  name: myapp-headless-service
  namespace: myapp-ns
  labels:
    intent: headless-service-for-myapp
spec:
  clusterIP: None
  ports:
    - name: http
      port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    app: myapp

# NodePort is used to access the application on the hostmachine
---
apiVersion: v1
kind: Service
metadata:
  name: myapp-service
  namespace: myapp-ns
  labels:
    intent: service-for-myapp
spec:
  type: NodePort
  ports:
    - port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    app: myapp
# apiVersion: apps/v1
# kind: Deployment
# metadata:
#   name: myapp
# spec:
#   replicas: 3
#   selector:
#     matchLabels:
#       app: myapp
#   template:
#     metadata:
#       labels:
#         app: myapp
#     spec:
#       containers:
#         - name: myapp
#           image: ubuntu
#           ports:
#             - containerPort: 5000
#           command: ["/bin/sleep", "3650d"]
#           resources:
#             limits:
#               memory: 200Mi
#               cpu: 100m

# ---
# apiVersion: v1
# kind: Pod
# metadata:
#   name: nginx
#   labels:
#     name: nginx
# spec:
#   containers:
#     - name: nginx
#       image: nginx:1.18
#       ports:
#         - containerPort: 80
#       volumeMounts:
#         - mountPath: /usr/share/nginx/html/index.html
#           name: nginx-index-file
#           subPath: index.html

#         - name: nginx-config
#           mountPath: /etc/nginx/nginx.conf
#           subPath: nginx.conf

#       resources:
#         limits:
#           memory: 100Mi
#           cpu: 100m

#   volumes:
#     - name: nginx-index-file
#       configMap:
#         name: nginx-index-html-configmap
#         resources:
#           limits:
#             memory: 200Mi
#             cpu: 100m
